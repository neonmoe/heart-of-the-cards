[gd_scene load_steps=6 format=2]

[ext_resource path="res://assets/model/CardFire.mesh" type="ArrayMesh" id=1]
[ext_resource path="res://assets/scenes/cards/CardBody.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]

script/source = "# FIRE CARD #
extends \"res://assets/scenes/cards/CardBase.gd\"

const DAMAGE = 2
const BONUS_DAMAGE = 1
const FIRE_STACKS = 2

func hit(enemy):
	if enemy.has_method(\"set_on_fire\"):
		if enemy.on_fire():
			enemy.take_damage(BONUS_DAMAGE)
		else:
			enemy.set_on_fire(FIRE_STACKS)
	if enemy.has_method(\"take_damage\"):
		enemy.take_damage(DAMAGE)
		return true
	return false
"

[sub_resource type="Shader" id=2]

code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	COLOR.rgb = mix( pow((COLOR.rgb + vec3(0.055)) * (1.0 / (1.0 + 0.055)), vec3(2.4)), COLOR.rgb* (1.0 / 12.92), lessThan(COLOR.rgb,vec3(0.04045)) );
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex+COLOR.rgb)*emission_energy;
}
"

[sub_resource type="ShaderMaterial" id=3]

render_priority = 0
shader = SubResource( 2 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 0.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/emission = Color( 0, 0, 0, 1 )
shader_param/emission_energy = 1.2
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
_sections_unfolded = [ "shader_param" ]

[node name="CardFire" type="Spatial"]

transform = Transform( 1, 0, 0, 0, -1.62921e-07, -1, 0, 1, -1.62921e-07, 0, 0.0851803, 0 )
script = SubResource( 1 )
_sections_unfolded = [ "Transform" ]

[node name="Mesh" type="MeshInstance" parent="." index="0"]

transform = Transform( -0.01, -8.74228e-10, 0, 4.26727e-13, -4.88118e-06, 0.01, -8.74228e-10, 0.01, 4.88118e-06, 0, 0, -0.3 )
layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = ExtResource( 1 )
skeleton = NodePath("..")
material/0 = SubResource( 3 )
_sections_unfolded = [ "Transform", "material" ]

[node name="CardBody" parent="." index="1" instance=ExtResource( 2 )]


