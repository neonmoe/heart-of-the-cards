[gd_scene load_steps=18 format=2]

[ext_resource path="res://assets/model/FireFx.mesh" type="ArrayMesh" id=1]
[ext_resource path="res://assets/model/IceFx.mesh" type="ArrayMesh" id=2]
[ext_resource path="res://assets/model/ShockFx.mesh" type="ArrayMesh" id=3]

[sub_resource type="GDScript" id=1]

script/source = "# Enemy Body #
extends KinematicBody

var initial = true
var fx_fire
var fx_freeze
var fx_stun
var fx_death
var base_scale

func _ready():
	fx_fire = $OnFireIndicator
	fx_freeze = $FrozenIndicator
	fx_stun = $StunIndicator
	fx_death = $DeathFx

func _process(delta):
	if initial:
		initial = false
		base_scale = $Mesh.scale
		fx_death.scale = base_scale
	
	# FX ANIMATIONS #
	
	# Some oscillators
	var osc = sin(OS.get_ticks_msec() / 75.0)
	var alt_osc = sin(OS.get_ticks_msec() / 150.0)
	var time_angle = OS.get_ticks_msec() / 1000.0 * 360

	# Fire scale
	var scale = base_scale
	scale.y *= pow(abs(osc), 5) * 0.5 + 0.5
	scale.x *= sign(osc)
	fx_fire.scale = scale
	var rot = fx_fire.rotation_degrees
	rot.y = time_angle
	fx_fire.rotation_degrees = rot
	
	# Freeze scale
	scale = base_scale
	scale *= alt_osc * 0.025 + 0.975	
	fx_freeze.scale = scale
	
	# Stun rotation
	rot = fx_stun.rotation_degrees
	rot.y = time_angle
	fx_stun.rotation_degrees = rot

func explode():
	fx_death.emitting = true
	var prev_transform = fx_death.global_transform
	remove_child(fx_death)
	$\"/root/Arena\".add_child(fx_death)
	fx_death.global_transform = prev_transform

func set_explosion_size(n):
	fx_death.amount = n * 15

func _on_Area_body_entered(body):
	get_parent()._on_Area_body_entered(body)
"

[sub_resource type="CapsuleShape" id=2]

radius = 0.5
height = 0.4

[sub_resource type="Shader" id=10]

code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	COLOR.rgb = mix( pow((COLOR.rgb + vec3(0.055)) * (1.0 / (1.0 + 0.055)), vec3(2.4)), COLOR.rgb* (1.0 / 12.92), lessThan(COLOR.rgb,vec3(0.04045)) );
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex+COLOR.rgb)*emission_energy;
}
"

[sub_resource type="ShaderMaterial" id=11]

render_priority = 0
shader = SubResource( 10 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 0.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/emission = Color( 0, 0, 0, 1 )
shader_param/emission_energy = 0.5
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
_sections_unfolded = [ "shader_param" ]

[sub_resource type="Shader" id=12]

code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	COLOR.rgb = mix( pow((COLOR.rgb + vec3(0.055)) * (1.0 / (1.0 + 0.055)), vec3(2.4)), COLOR.rgb* (1.0 / 12.92), lessThan(COLOR.rgb,vec3(0.04045)) );
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex+COLOR.rgb)*emission_energy;
}
"

[sub_resource type="ShaderMaterial" id=13]

render_priority = 0
shader = SubResource( 12 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 0.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/emission = Color( 0, 0, 0, 1 )
shader_param/emission_energy = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="Shader" id=14]

code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	COLOR.rgb = mix( pow((COLOR.rgb + vec3(0.055)) * (1.0 / (1.0 + 0.055)), vec3(2.4)), COLOR.rgb* (1.0 / 12.92), lessThan(COLOR.rgb,vec3(0.04045)) );
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex+COLOR.rgb)*emission_energy;
}
"

[sub_resource type="ShaderMaterial" id=15]

render_priority = 0
shader = SubResource( 14 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 0.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/emission = Color( 0, 0, 0, 1 )
shader_param/emission_energy = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="SpatialMaterial" id=7]

render_priority = 0
flags_transparent = false
flags_unshaded = false
flags_vertex_lighting = false
flags_no_depth_test = false
flags_use_point_size = false
flags_world_triplanar = false
flags_fixed_size = false
flags_albedo_tex_force_srgb = false
vertex_color_use_as_albedo = false
vertex_color_is_srgb = false
params_diffuse_mode = 0
params_specular_mode = 0
params_blend_mode = 0
params_cull_mode = 0
params_depth_draw_mode = 0
params_line_width = 1.0
params_point_size = 1.0
params_billboard_mode = 0
params_grow = false
params_use_alpha_scissor = false
albedo_color = Color( 1, 0.320312, 0.320312, 1 )
metallic = 0.0
metallic_specular = 0.5
metallic_texture_channel = 0
roughness = 0.0
roughness_texture_channel = 0
emission_enabled = false
normal_enabled = false
rim_enabled = false
clearcoat_enabled = false
anisotropy_enabled = false
ao_enabled = false
depth_enabled = false
subsurf_scatter_enabled = false
transmission_enabled = false
refraction_enabled = false
detail_enabled = false
uv1_scale = Vector3( 1, 1, 1 )
uv1_offset = Vector3( 0, 0, 0 )
uv1_triplanar = false
uv1_triplanar_sharpness = 1.0
uv2_scale = Vector3( 1, 1, 1 )
uv2_offset = Vector3( 0, 0, 0 )
uv2_triplanar = false
uv2_triplanar_sharpness = 1.0
proximity_fade_enable = false
distance_fade_enable = false
_sections_unfolded = [ "Albedo" ]

[sub_resource type="CubeMesh" id=8]

material = SubResource( 7 )
size = Vector3( 0.3, 0.3, 0.3 )
subdivide_width = 0
subdivide_height = 0
subdivide_depth = 0

[sub_resource type="CapsuleShape" id=9]

radius = 0.6
height = 1.0

[sub_resource type="ParticlesMaterial" id=16]

render_priority = 0
trail_divisor = 1
emission_shape = 2
emission_box_extents = Vector3( 6, 3, 10 )
flag_align_y = false
flag_rotate_y = false
flag_disable_z = false
spread = 40.0
flatness = 0.0
gravity = Vector3( 0, -10, 0 )
initial_velocity = 35.0
initial_velocity_random = 0.0
angular_velocity = 3.09154e-41
angular_velocity_random = 0.0
linear_accel = 0.0
linear_accel_random = 0.0
radial_accel = 0.0
radial_accel_random = 0.0
tangential_accel = 0.0
tangential_accel_random = 0.0
damping = 0.0
damping_random = 0.0
angle = 0.0
angle_random = 0.0
scale = 1.0
scale_random = 0.0
color = Color( 1, 1, 1, 1 )
hue_variation = 0.0
hue_variation_random = 0.0
anim_speed = 0.0
anim_speed_random = 0.0
anim_offset = 0.0
anim_offset_random = 0.0
anim_loop = false
_sections_unfolded = [ "Emission Shape", "Gravity", "Initial Velocity", "Linear Accel", "Spread" ]

[sub_resource type="SpatialMaterial" id=18]

render_priority = 0
flags_transparent = false
flags_unshaded = false
flags_vertex_lighting = false
flags_no_depth_test = false
flags_use_point_size = false
flags_world_triplanar = false
flags_fixed_size = false
flags_albedo_tex_force_srgb = false
vertex_color_use_as_albedo = false
vertex_color_is_srgb = false
params_diffuse_mode = 0
params_specular_mode = 0
params_blend_mode = 0
params_cull_mode = 0
params_depth_draw_mode = 0
params_line_width = 1.0
params_point_size = 1.0
params_billboard_mode = 0
params_grow = false
params_use_alpha_scissor = false
albedo_color = Color( 0.554688, 0.183564, 0.145172, 1 )
metallic = 0.0
metallic_specular = 0.5
metallic_texture_channel = 0
roughness = 0.0
roughness_texture_channel = 0
emission_enabled = true
emission = Color( 1, 0.21875, 0.21875, 1 )
emission_energy = 0.04
emission_operator = 0
emission_on_uv2 = false
normal_enabled = false
rim_enabled = false
clearcoat_enabled = false
anisotropy_enabled = false
ao_enabled = false
depth_enabled = false
subsurf_scatter_enabled = false
transmission_enabled = false
refraction_enabled = false
detail_enabled = false
uv1_scale = Vector3( 1, 1, 1 )
uv1_offset = Vector3( 0, 0, 0 )
uv1_triplanar = false
uv1_triplanar_sharpness = 1.0
uv2_scale = Vector3( 1, 1, 1 )
uv2_offset = Vector3( 0, 0, 0 )
uv2_triplanar = false
uv2_triplanar_sharpness = 1.0
proximity_fade_enable = false
distance_fade_enable = false
_sections_unfolded = [ "Albedo", "Emission" ]

[sub_resource type="CubeMesh" id=17]

material = SubResource( 18 )
size = Vector3( 0.1, 0.1, 0.1 )
subdivide_width = 0
subdivide_height = 0
subdivide_depth = 0

[node name="Body" type="KinematicBody"]

input_ray_pickable = true
input_capture_on_drag = false
collision_layer = 1
collision_mask = 1
axis_lock_linear_x = false
axis_lock_linear_y = false
axis_lock_linear_z = false
axis_lock_angular_x = false
axis_lock_angular_y = false
axis_lock_angular_z = false
collision/safe_margin = 0.001
script = SubResource( 1 )

[node name="CollisionShape" type="CollisionShape" parent="." index="0"]

transform = Transform( 1, 0, 0, 0, -1.62921e-07, -1, 0, 1, -1.62921e-07, 0, 0.7, 0 )
shape = SubResource( 2 )
disabled = false
_sections_unfolded = [ "Transform" ]

[node name="OnFireIndicator" type="MeshInstance" parent="." index="1"]

transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
visible = false
layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = ExtResource( 1 )
skeleton = NodePath("..")
material/0 = SubResource( 11 )
_sections_unfolded = [ "Transform", "material" ]

[node name="FrozenIndicator" type="MeshInstance" parent="." index="2"]

transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
visible = false
layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = ExtResource( 2 )
skeleton = NodePath("..")
material/0 = SubResource( 13 )
_sections_unfolded = [ "Transform", "material" ]

[node name="StunIndicator" type="MeshInstance" parent="." index="3"]

transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 0, 0 )
visible = false
layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = ExtResource( 3 )
skeleton = NodePath("..")
material/0 = SubResource( 15 )
_sections_unfolded = [ "Transform", "material" ]

[node name="HealthIndicator" type="Spatial" parent="." index="4"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.1464, 0 )

[node name="HealthMesh" type="MeshInstance" parent="HealthIndicator" index="0"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.149827, 0 )
layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = SubResource( 8 )
skeleton = NodePath("..")
material/0 = null
_sections_unfolded = [ "material" ]

[node name="Area" type="Area" parent="." index="5"]

input_ray_pickable = false
input_capture_on_drag = false
space_override = 0
gravity_point = false
gravity_distance_scale = 0.0
gravity_vec = Vector3( 0, -1, 0 )
gravity = 9.8
linear_damp = 0.1
angular_damp = 1.0
priority = 0.0
monitoring = true
monitorable = true
collision_layer = 1
collision_mask = 1
audio_bus_override = false
audio_bus_name = "Master"
reverb_bus_enable = false
reverb_bus_name = "Master"
reverb_bus_amount = 0.0
reverb_bus_uniformity = 0.0

[node name="CollisionShape" type="CollisionShape" parent="Area" index="0"]

transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0.533478, 0 )
shape = SubResource( 9 )
disabled = false

[node name="DeathFx" type="Particles" parent="." index="6"]

transform = Transform( 0.1, -1.74846e-08, -3.01876e-12, -3.01876e-12, -3.45306e-05, 0.1, -1.74846e-08, -0.1, -3.45306e-05, 0, 0.592887, 0 )
layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
emitting = false
amount = 30
lifetime = 2.0
one_shot = true
preprocess = 0.0
speed_scale = 1.0
explosiveness = 1.0
randomness = 0.0
fixed_fps = 0
fract_delta = true
visibility_aabb = AABB( -30, -30, -40, 60, 60, 80 )
local_coords = false
draw_order = 0
process_material = SubResource( 16 )
draw_passes = 1
draw_pass_1 = SubResource( 17 )
_sections_unfolded = [ "Draw Passes", "Drawing", "Process Material", "Time", "Transform" ]

[connection signal="body_entered" from="Area" to="." method="_on_Area_body_entered"]


